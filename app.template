AWSTemplateFormatVersion: 2010-09-09
Metadata:
  DefaultName: app
Parameters:
  # Networks, foundations
  VpcId:
    Description: 'VPCid associated with the subnets. [elb-subnets.parameters.VpcId]'
    Type: 'AWS::EC2::VPC::Id'
  EcsCluster:
    Description: 'Cluster'
    Type: String
  ElbTargetSecGroup:
    Description: ''
    Type: 'AWS::EC2::SecurityGroup::Id'
  ElbSecGroup:
    Description: ''
    Type: 'AWS::EC2::SecurityGroup::Id'
  WebServerSubnets:
    Description: ''
    Type: CommaDelimitedList
    Default: ''
  # / Networks, foundations

  # Service specifics
  Environment:
    Description: Environment variable that gets sent to the docker instance
    Type: String
    Default: Dev
  CpuReservation:
    Description: ''
    Type: String
    Default: '256'
  MemoryReservation:
    Description: ''
    Type: String
    Default: '512'
  ImageName:
    Description: ''
    Type: String
    Default: 'tutum/hello-world'
  ContainerPort:
    Description: ''
    Type: String
    Default: '80'
  HealthUrl:
    Description: ''
    Type: String
    Default: /health
  # / Service specifics

  # Loadbalancer Targets, DNS
  GatewayCanonicalZoneId:
    Description: ''
    Type: String
  GatewayDnsName:
    Description: ''
    Type: String
  GatewayName:
    Description: ''
    Type: String
  HttpsListener:
    Description: ''
    Type: String
  ListenerPriority:
    Description: ''
    Type: String
  HostedZone:
    Description: Hosted Zone
    Type: String
  Subdomain:
    Description: Subdomain (Without '.')
    Type: String
  # / Loadbalancer Targets, DNS

  # Database Informations
  DatabaseEndpoint:
    Description: Database Server Endpoint
    Type: String
  DatabaseName:
    Description: Database Name
    Type: String
    Default: oh
  DatabasePort:
    Description: Database Name
    Type: String
    Default: 1443
  DbUsername:
    Description: Database Server username
    Type: String
    Default: sqladmin
  DbPassword:
    Description: Database Server password
    Type: String
    NoEcho: 'True'
  # / Database Informations  

  # Application Configs and Secrets
  ApiUsername:
    Description: Api Username
    Type: String
  ApiPassword:
    Description: Api Password
    Type: String
    NoEcho: 'True'
  # / Application Configs and Secrets

Conditions:
  IsNaked: !Equals [!Ref Subdomain, '']

Resources:
  # Stores
  AppBucket:
    Type: 'AWS::S3::Bucket'
  ApiAuthStore:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Type: StringList
      Value: !Sub "user:${ApiUsername},key:${ApiPassword}"
  DatabaseInfoStore:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Type: StringList
      Value: !Sub "DbEndpoint:${DatabaseEndpoint},DbName:${DatabaseName},DbPort:${DatabasePort},DbUser:${DbUsername},DbPassword:${DbPassword}"
  PgpPrivateStore:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Type: String
      Value: 'dummy-please-upload-manually'
  SshPrivateStore:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Type: String
      Value: 'dummy-please-upload-manually'
  # / Stores
 
  # Service
  EcsServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ['ecs.amazonaws.com']
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                  - 'ec2:Describe*'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ecs:TagResource'
                Resource: '*'
  TaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ['ecs-tasks.amazonaws.com']
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: "tagging"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
                - Effect: 'Allow'
                  Action: ['ecs:TagResource']
                  Resource: ["*"]
        - PolicyName: "param-store"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: 'Allow'
                Action: ['ssm:GetParameter']
                Resource: 
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApiAuthStore}*'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DatabaseInfoStore}*'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${PgpPrivateStore}*'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${DatabaseInfoStore}*'
  Bucketolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      Groups: []
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            - Effect: Allow
              Action: ['s3:Get*','s3:List*']
              Resource:
                - !Sub 'arn:aws:s3:::${AppBucket}/*'
                - !Sub 'arn:aws:s3:::${AppBucket}'
      PolicyName: s3-bucket-policy
      Roles: [!Ref TaskRole]
  FargateExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-fargate
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:CreateCluster'
                  - 'ecs:DeregisterContainerInstance'
                  - 'ecs:DiscoverPollEndpoint'
                  - 'ecs:Poll'
                  - 'ecs:RegisterContainerInstance'
                  - 'ecs:StartTelemetrySession'
                  - 'ecs:Submit*'
                  - 'ecr:Batch*'
                  - 'ecr:Get*'
                Resource: '*'        
  TaskDef:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Cpu: !Ref CpuReservation
      Memory: !Ref MemoryReservation
      ExecutionRoleArn: !Ref FargateExecutionRole
      RequiresCompatibilities: [FARGATE]
      ContainerDefinitions:
        - Name: app
          Essential: 'true'
          Image: !Ref ImageName
          Environment:
            - Name: CFN_ENV
              Value: !Ref Environment
            - Name: CFN_STACK_NAME
              Value: !Ref 'AWS::StackName'
            - Name: CFN_AUTHSTORE
              Value: !Ref ApiAuthStore
            - Name: CFN_DATABASESTORE
              Value: !Ref DatabaseInfoStore
            - Name: CFN_APPBUCKET
              Value: !Ref AppBucket
            - Name: CFN_PGPSTORE
              Value: !Ref PgpPrivateStore
            - Name: CFN_SSHSTORE
              Value: !Ref SshPrivateStore
          PortMappings:
            - ContainerPort: !Ref ContainerPort
      NetworkMode: awsvpc
      TaskRoleArn: !Ref TaskRole
  EcsService:
    Type: 'AWS::ECS::Service'
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 2
      LaunchType: FARGATE
      LoadBalancers: 
        - ContainerName: app
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref DirectTargetGroup
      TaskDefinition: !Ref TaskDef
      NetworkConfiguration: 
        AwsvpcConfiguration:
          SecurityGroups: 
            - !Ref ElbTargetSecGroup
            - !Ref ElbSecGroup
          Subnets: !Ref WebServerSubnets
  # / Service

  # Scalings and desired tasks
  ServiceCapacityScalingTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    DependsOn: EcsService
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub 'service/${EcsCluster}/${EcsService.Name}'
      RoleARN: !GetAtt AutoscalingRole.Arn
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
  ServiceScalingUpPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-ScaleUpPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceCapacityScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 15
            ScalingAdjustment: 200
          - MetricIntervalUpperBound: 15
            MetricIntervalLowerBound: 0
            ScalingAdjustment: 100
  ServiceScalingDownPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-ScaleDownPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceCapacityScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
  CpuAlarmScaleUp:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '70'
      AlarmDescription: CPU based out scaling.
      Period: '60'
      AlarmActions: [!Ref ServiceScalingUpPolicy]
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !GetAtt EcsService.Name
        - Name: ClusterName
          Value: !Ref EcsCluster
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
  CpuAlarmScaleDown:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      EvaluationPeriods: '2'
      Statistic: Average
      Threshold: '30'
      AlarmDescription: CPU based in scaling.
      Period: '60'
      AlarmActions: [!Ref ServiceScalingDownPolicy]
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !GetAtt EcsService.Name
        - Name: ClusterName
          Value: !Ref EcsCluster
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
  AutoscalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                Resource: '*'
  # / Scalings and desired tasks

  # Listner Rules
  # Listener Rules. Separated as CFN on update will try to create a new listener
  # rule without a new target group which causes an error.
  ListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref DirectTargetGroup
      Conditions:
        - Field: host-header
          Values: !If [IsNaked, [!Ref HostedZone], [!Sub '${Subdomain}.${HostedZone}']]
      ListenerArn: !Ref HttpsListener
      Priority: !Ref ListenerPriority
  DirectTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: '60'
      HealthCheckPath: !Ref HealthUrl
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: '30'
      HealthyThresholdCount: 10
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: !Ref VpcId
      TargetType: ip
  # / Listner Rules

  Route53:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: !Sub '${HostedZone}.'
      Comment: Hostname
      Name: !If
        - IsNaked
        - !Ref HostedZone
        - !Join [.,[!Ref Subdomain, !Ref HostedZone,'']]
      Type: A
      AliasTarget:
        DNSName: !Ref GatewayDnsName
        HostedZoneId: !Ref GatewayCanonicalZoneId            